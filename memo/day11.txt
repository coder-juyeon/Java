collection -> 강사님 코드 복습하기


<user 강사님 코드>
package collectionTask;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import org.json.simple.JSONObject;

import net.nurigo.java_sdk.api.Message;
import net.nurigo.java_sdk.exceptions.CoolsmsException;

public class UserField {
   public ArrayList<User> users = DBConnecter.users;
   private final int KEY = 3;
   private final int NUMBER_LENGTH = 5;
   
//   아이디 중복검사
   public User checkId(String id) {
      User user = null;
      
      for(User temp : users) {
         if(temp.getId().equals(id)) {
            user = temp;
            break;
         }
      }
      
      return user;
   }
   
   public void join(User user) {
      user.setPassword(encrypt(user.getPassword()));
      users.add(user);
   }
   
//   암호화
   private String encrypt(String password) {
      String encryptedPassword = "";
      
      for (int i = 0; i < password.length(); i++) {
         encryptedPassword += (char)(password.charAt(i) * KEY);
      }
      
      return encryptedPassword;
   }
   
//   로그인
   public User login(String id, String password) {
      User user = checkId(id);
      if(user != null) {
         if(user.getPassword().equals(encrypt(password))) {
            return user;
         }
      }
      return null;
   }
   
//   비밀번호 변경
   public void changePassword(User user) {
      User userInDataBase = checkId(user.getId());
      userInDataBase.setPassword(encrypt(user.getPassword()));
   }
   
//   인증번호 생성
   private String getNumber() {
      Random random = new Random();
      String number = "";
      for (int i = 0; i < NUMBER_LENGTH; i++) {
         number += random.nextInt(10);
      }
      return number;
   }
   
//   인증번호 전송
   public String sendMessage(String phoneNumber) {
      String number = getNumber();
      String api_key = "";
       String api_secret = "";
       Message coolsms = new Message(api_key, api_secret);

       // 4 params(to, from, type, text) are mandatory. must be filled
       HashMap<String, String> params = new HashMap<String, String>();
       params.put("to", phoneNumber);
       params.put("from", "01000000000");
       params.put("type", "SMS");
       params.put("text", "회사명\n인증번호를 정확히 입력해주세요.\n[" + number + "]");
       params.put("app_version", "test app 1.2"); // application name and version

       try {
         JSONObject obj = (JSONObject) coolsms.send(params);
       } catch (CoolsmsException e) {
         System.out.println(e.getMessage());
         System.out.println(e.getCode());
       }
       
       return number;
   }
}

[ArrayList 실습1]

과일 정보를 담을 클래스 선언(Fruit)
	- 과일 이름(중복 없음)
	- 과일 가격

CRUD관련 기능을 담아놓을 클래스 선언(Market)
	- 과일 추가
	- 과일 삭제
	- 과일 가격이 평균 가격보다 낮은 지 검사
	- 과일 전체 조회
	- 과일 이름으로 가격 조회
	- 중복검사

<강사님 코드>
package arrayListTask;

import java.util.ArrayList;

public class Market {
   public ArrayList<Fruit> fruits = DBConnecter.fruits;
   
// 과일 검사
   public Fruit checkFruit(String name) {
      for (Fruit fruit : fruits) {
         if(fruit.getName().equals(name)) {
            return fruit;
         }
      }
      return null;
   }
   
//   과일 추가
   public void add(Fruit fruit) {
      fruits.add(fruit);
   }
   
//   과일 삭제
   public void remove(String name) {
      Fruit fruit = checkFruit(name);
      fruits.remove(fruit);
   }
   
//   과일 가격이 평균 가격보다 낮은 지 검사
   public boolean checkPrice(int price) {
      return getAverage() > price;
   }
   
//   평균 가격
   private double getAverage() {
      int total = 0;
      
      for (Fruit fruit : fruits) {
         total += fruit.getPrice();
      }
      
      return (double)total / fruits.size();
   }
   
//   과일 전체 조회
   public ArrayList<Fruit> selectAll() {
      return fruits;
   }
   
//   과일 이름으로 가격 조회
   public int findByName(String name) {
      return checkFruit(name).getPrice();
   }
}


[ArrayList 실습2]
음식 정보를 담을 클래스 선언(Food)
	- 음식 이름
	- 음식 가격
	- 음식 종류(한식, 중식, 일식, 양식)

CRUD관련 기능을 담아놓을 클래스 선언(Restaurant)
	- 음식 추가
	- 음식 이름으로 음식 종류 조회
	- 사용자가 원하는 종류의 음식 전체 조회
	- 음식 종류 수정 후 가격 10% 상승
	- 사용자가 원하는 종류의 음식 개수 조회

<강사님 코드>
package arrayListTask;

import java.util.ArrayList;

public class Rastaurant {
   ArrayList<Food> foods = DBConnecter.foods;
   
//   음식 추가
   public void add(Food food) {
      foods.add(food);
   }
   
//   음식 이름으로 음식 종류 조회
   public String findKindByName(String name) {
      for (Food food : foods) {
         if(food.getName().equals(name)) {
            return food.getKind();
         }
      }
      return null;
   }
   
//   사용자가 원하는 종류의 음식 전체 조회
   public ArrayList<Food> findAllByKind(String kind){
      ArrayList<Food> results = new ArrayList<Food>();
      for (Food food : foods) {
         if(food.getKind().equals(kind)) {
            results.add(food);
         }
      }
      return results;
   }
   
//   음식 종류 수정 후 가격 10% 상승
   public void update(Food food) {
      for (Food foodInDatabase : foods) {
         if(foodInDatabase.getName().equals(food.getName())) {
            foodInDatabase.setKind(food.getKind());
            foodInDatabase.setPrice((int)(foodInDatabase.getPrice() * 1.1));
         }
      }
   }
   
//   사용자가 원하는 종류의 음식 개수 조회
   public int getCountByKind(String kind) {
      int count = 0;
      for (Food food : foods) {
         if(food.getKind().equals(kind)) {
            count ++;
         }
      }
      return count;
   }
}




[ArrayList 실습3]

사용자 정보를 담을 클래스 선언(Love)
	- 번호
	- 이름
	- 나이

CRUD관련 기능을 담아놓을 클래스 선언(DateApp)
	- 사용자가 원하는 나이의 이상형 목록 조회
	- 이상형의 나이 수정
	- 이상형 나이 순 정렬

<강사님 코드>
package arrayListTask;

import java.util.ArrayList;
import java.util.Collections;

public class DateApp {

   public ArrayList<Love> loves = DBConnecter.loves;
   
//   이상형 추가
   public void add(Love love) {
      loves.add(love);
   }
   
//   사용자가 원하는 나이의 이상형 목록 조회
   public ArrayList<Love> findAllByAge(int age) {
      ArrayList<Love> results = new ArrayList<Love>();
      for (Love love : loves) {
         if(love.getAge() == age) {
            results.add(love);
         }
      }
      return results;
   }
   
//   이상형의 나이 수정
   public void updateAge(Love love) {
      for (Love loveInDatabase : loves) {
         if(loveInDatabase.getNumber() == love.getNumber()) {
            loveInDatabase.setAge(love.getAge());
         }
      }
   }
   
//   이상형 나이 순 정렬
   public void sort() {
//      DB에 있는 이상형들을 나이 순으로 정렬한 결과
      ArrayList<Love> results = new ArrayList<Love>();
      
//      이상형들의 나이만 담을 자료구조
      ArrayList<Integer> ages = new ArrayList<Integer>();
      
//      loves에서 나이를 가져와서 ages에 추가
      for (Love love : loves) {
         ages.add(love.getAge());
      }
      
//      오름차순으로 정렬
      Collections.sort(ages);
      
      for (int age : ages) {
         for (int i=0; i<loves.size(); i++) {
            if(loves.get(i).getAge() == age) {
               results.add(loves.get(i));
               loves.remove(loves.get(i));
            }
         }
      }
      loves = results;
   }
}


[ArrayList 실습4]
	본인이 주제 선정해서 만들기

----------------------------------------------------------------
2. Set extends Collection
- 구현 클래스
	HashSet
		집합에서는 중복되는 원소를 포함할 수 없는 것 처럼
		HashSet이라는 자료구조를 중복되는 값을 무시한다.
		저장된 값들은 인덱스가 없기 때문에 순서가 없다.
		값의 유무 검사에 특화되어 있는 자료구조이고
		해시코드로 유무 검사가 진행되기 때문에 속도가 상대적으로 좋다.

- 순서 부여
	순서가 없는 객체에 순서를 부여하거나, 순서가 있어도 iterator방식의 순서로
	변경하고자 할 때 사용한다.
	hasNext()를 통해 다음 값이 있는 지 검사하고, next()를 사용해서 값을 가져온다.

----------------------------------------------------------------
3. Map

- 구현 클래스
	HasMap (서버 간 데이터 교환)
		Key와 Value 한 쌍으로 저장되며, 검색의 목적을 가지고 있다.
		Key에 중복된 값을 넣으면 Value가 최근 값으로 수정되고
		중복되지 않은 값을 넣으면 새롭게 추가된다. Value는 중복이 가능하다.
----------------------------------------------------------------

//		상품 클래스 선언(상품 번호, 상품 이름, 상품 가격, 상품 재고)
//		1. 상품 1개를 제작하여 JSON형식으로 변경
//		2. JSON형식의 상품 정보 중 상품 재고 출력
		
//		3. 할인 중인 상품 정보 제작
//		4. 할인 중인 상품의 KEY값은 "discount"로 설정
//		5. JSON형식으로 변경
//		6. JSON에 할인율 필드 추가
//		7. JSON형식의 상품 정보 중 할인률 출력